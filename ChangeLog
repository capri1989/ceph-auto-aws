CHANGES
=======

v0.1.1
------

* Bump version: 0.1.0 → 0.1.1
* tests/: adapt to current state
* Implement "wipeout vpc" subcommand
* myyaml.py: check for None on assignment
* Parse wipeout subcommands
* docker/: add code for building docker testing environments
* tests/: refrain from importing os module
* myyaml: add reset(
* tests: add test cases, improve coverage, inherit setup
* tox: add tox to dependencies and enable Python 3
* README.rst: acknowledge Loic
* tests/test_vpc.py: add test for VPC cache
* bootstrap: check for virtualenv and exit on error
* myyaml.py: wrap dict_items object in a list()
* README.rst: clarify python-virtualenv dependency
* README.rst: probe cluster-definition and probe roles are no more
* update ChangeLog

v0.1.0
------

* Bump version: 0.0.18 → 0.1.0
* update ChangeLog
* Redesign
* aws.py: drop deprecated module
* data/bogus.yaml: new YAML validation code makes these changes
* myyaml.py: more rewriting
* README.rst: update to current state
* Rename clusters.py -> cluster.py
* myyaml.py: rewrite
* README.rst: drop superfluous Introduction subsection headings
* README.rst: work on the Introduction
* util.py: add a module for utility functions
* myyaml.py: make validate_role_definitions() validate type
* update ChangeLog

v0.0.18
-------

* Bump version: 0.0.17 → 0.0.18
* Implement "probe cluster-definition" and "probe role-definitions"
* main.py: explicitly exit with status code 0
* Use error_exit() function instead of raising HandsOnError
* data/aws.yaml-sample: rename "roles" -> "role-definitions"
* Implement --retag option for "probe subnets" and "probe vpc"
* data/: update sample yaml file
* README.rst: write about cluster and role definitions
* Add tests and clean up code to improve coverage
* clusters.py: validate delegate list in Install class
* aws.py: fix logic in get_subnet_obj()
* update ChangeLog

v0.0.17
-------

* Bump version: 0.0.16 → 0.0.17
* Implement 'probe types' subcommand
* aws.py: clean up vpc and subnet functions and methods
* probe.py: drop unused code
* Re-implement "ho probe" with a subparser
* Add "cluster", "roles", "types" stanzas to sample aws.yaml
* probe.py: drop earlier Install implementation attempt
* probe.py: import AWS class directly
* clusters.py: process delegate lists
* Block out install subcommand
* aws.py: refrain from tagging VPC if it's already there
* update ChangeLog

v0.0.16
-------

* Bump version: 0.0.15 → 0.0.16
* tests/: test probe-subnets subcommand
* aws.py: check that subnet ID really exists
* update ChangeLog

v0.0.15
-------

* Bump version: 0.0.14 → 0.0.15
* release.sh: deduce version tag and push it to remote
* update ChangeLog

v0.0.14
-------

* Bump version: 0.0.13 → 0.0.14
* release.sh: tweak release script

v0.0.13
-------

* Bump version: 0.0.12 → 0.0.13
* Implement probe-subnets subcommand
* main.py, probe.py: add probe-subnets boilerplate
* aws.py: move apply_tag() up before vpn_obj() which uses it
* README.rst: finish VPC chapter and start Subnets chapter
* README.rst: fix table and warning
* README.rst: Internet Gateway and Route Table
* README.rst: ho probe-yaml
* aws.yaml -> data/aws.yaml-sample
* Improve VPC and region error-checking
* aws.yaml: remove transient parts of vpc stanza
* README.rst: adapt to current state
* Give AWS and MyYaml each their own instance variable for state
* Refactor to implement chain of inheritance
* myyaml.py: add ability to write the YaML file
* aws.py: add ability to probe VPC
* main.py: probe-* subcommands
* requirements.txt: pyaml for prettier dumps
* aws.yaml: replace with pyaml.dump version
* Replace testyaml.py and testcred.py with probe.py
* aws.py: use connect_to_region() for ec2 and vpc init
* Load yaml file first time MyYaml.tree() is called
* testcred.py: use ping_ec2() method
* Move error classes to error.py
* release.sh: tone down ChangesLog spam

v0.0.12
-------

* Bump version: 0.0.11 → 0.0.12
* Implement myyaml singleton and test-yaml subcommand
* tox.ini: run flake8 on tests/ directory, too
* aws.py: rename conn() method to ec2()

v0.0.11
-------

* Bump version: 0.0.10 → 0.0.11
* release.sh: run tox instead of "python setup.py install"
* tests: mock the boto.connect_ec2() function
* aws.py: implement and use AWS connection state singleton

v0.0.10
-------

* Bump version: 0.0.9 → 0.0.10
* update ChangeLog
* Implement and test --version option
* .bumpversion.cfg: update version number in main.py

v0.0.9
------

* Bump version: 0.0.8 → 0.0.9
* update ChangeLog
* Improve test coverage
* setup.cfg: one-time version number fix
* Move bumpversion configuration to separate file
* README.rst: describe new tox-based installation workflow
* README.rst: split code and documentation license

v0.0.8
------

* Bump version: 0.0.7 → 0.0.8
* update ChangeLog
* tests: implement first unit test
* requirements.txt: add pytest and pytest-capturelog
* Add tox.ini and start using tox to build
* requirements.txt: add coverage and mock

v0.0.7
------

* Bump version: 0.0.6 → 0.0.7
* update ChangeLog
* release.sh: release automation script

v0.0.6
------

* Bump version: 0.0.5 → 0.0.6
* Start using bumpversion to increment version numbers

v0.0.5
------

* 0.0.5
* Bump target version to 0.0.5
* README.rst: bootstrapping instructions
* 0.0.4 release

0.0.4
-----

* flake8 fixups
* requirements.txt: add flake8

0.0.3
-----

* Initial packaging using setuptools
* Drop ho script from top-level directory
* .gitignore: add virtualenv directory
* handson: start wholesale refactor

0.0.2
-----

* list-public-ips.py: trap SpinupError
* susecon2015 LICENSE is (c) 2015
* LICENSE: 2015 -> 2016
* Move SUSEcon 2015 scripting to susecon2015 directory
* README.rst: minor syntax tweak
* README.rst: drop obsolete verbiage
* README.rst: write VPC chapter
* README.rst: document early steps

0.0.1
-----

* stop.py: add script to stop a delegate's instances
* start.py: add script to start a delegate's instances
* list-public-ips.py: run on delegates 1-40
* README.md: discuss a possible race condition
* README.md: minor grammar/style massage
* README.md: explain how to ping the minions
* README.md: cover salt key acceptance and Salt State
* Add user-data for windows client VM
* README.md: stub in deployment instructions
* README.md: clarification
* README.md: separate section for deploying Ceph cluster on VMs
* README.md: explain how to get public IP address of Salt Master
* README.md: flesh it out more
* README.md: tweaking continues
* README.md: more formatting tweaks
* README.md: fix formatting
* README.md: improve formatting and provide examples
* README.md: major rewrite
* list-public-ips.py: script to list public IPs of all delegates
* user-data-nodes-frozen: freeze state of nodes
* admin_nodes.py: new script displays list of admin node public IPs
* Add node_no grain
* aws.yaml: fix windows client; use unified user-data
* init_lib.py: enable @@ROLE@@
* user-data: add @@ROLE@@, consolidate into one file
* aws.py: change Name tag, add Role tag
* wipeout.py: fix init_lib.init_subnet() function call
* init_lib.py: create subnet if it doesn't exist
* aws.yaml: add nametag attribute; replace subnet name with delegate
* aws.py: create subnets if they do not exist; adjust tags
* aws.{py,yaml}: add osd-only and windows nodes
* user-data scripts: align, fix bug, add osd-only
* wipeout.py: add more documentation
* runner.py -> runner_lib.py
* wipeout.py: make Salt Master delete delegate's keys
* user-data-master: add some quick shell scriptlets
* init_lib.py: fix endless loop in wait_for_detachment()
* runner.py: module for running binaries via the os
* wipeout.py: finish basic script
* init_lib.py: implement wait_for_detachment() function
* aws.yaml: add subnet for Delegate 3
* aws.yaml: add subnet for delegate 2
* aws.py: tag volumes we create
* wipeout.py: start writing wipeout script
* init_lib.py: fix terrible lurking bugs in init_subnet()
* aws.py: Add monitor tag to monitors
* aws.py: fix make_reservation() calls
* Specify private_ip_address when reserving instances
* user-data: set up ntpd on admin and mon nodes
* user-data: change media2 to updates; tweak emails
* user-data: wait for zypper services to settle
* init_lib.py: fix make_reservation() breakage
* aws.py: fix function call
* Tweak user-data scripts and handling thereof
* aws.py: check for existing Salt Master instances..
* init_lib.py: implement count_instances_in_subnet()
* Fix bugs introduced by last refactor
* aws.py: fix and cleanup process_user_data calls
* init_lib.py: implement get_master_instance() function
* aws.yaml: add SLES_KEY environment variables to admin and mon
* aws.py: add pseudo-code comments and instructions for printing them
* aws.py: Process user-data for mons, too
* Slaving over AWS
* init_lib.py: cleanup
* Template SLES12 key
* aws.py: create mon nodes
* Work on admin node creation
* Refactor everything
* user-data-admin-nodes: user-data script for admin nodes
* LICENSE: Copyright belongs to SUSE LLC
* README.md: improve instructions
* user-data-master: cleanup
* Develop user-data-master script
* README.md: use backticks for inline code
* README.md: use a numbered list
* Initial commit
* Initial commit
